buildscript {
    repositories {
        jcenter()
        maven { url  'https://palantir.bintray.com/releases' }
    }

    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.netflix.nebula:gradle-dependency-lock-plugin:5.0.6'
        classpath 'com.netflix.nebula:nebula-publishing-plugin:5.1.4'
        classpath 'com.palantir.baseline:gradle-baseline-java:0.38.1'
    }
}

plugins {
    id 'com.palantir.git-version' version '0.11.0'
    id 'org.inferred.processors' version '2.0.0'
}

apply plugin: 'com.palantir.baseline'

allprojects {
    repositories {
        maven { url  'https://palantir.bintray.com/releases' }
        jcenter()
    }

    group 'com.palantir.conjure.java.api'
    version gitVersion()

    configurations.all {
        resolutionStrategy {
            failOnVersionConflict()
        }
    }
}

subprojects {
    apply plugin: 'java'

    sourceCompatibility = 1.8

    apply plugin: 'nebula.dependency-lock'
    dependencyLock {
        includeTransitives = true
        lockFile = 'versions.lock'
        configurationNames = ['runtime', 'compileClasspath']
    }

    task verifyDependencyLocksAreCurrent << {
        def expectedDependencies = tasks.saveLock.getOutputLock()
        def actualDependencies = tasks.saveLock.getGeneratedLock()
        def digester = java.security.MessageDigest.getInstance('SHA')
        logger.info("Verifying integrity of dependency locks: {} vs {}", expectedDependencies, actualDependencies)
        if (digester.digest(expectedDependencies.bytes) != digester.digest(actualDependencies.bytes)) {
            throw new GradleException("The dependencies of project " + project.name + " do not match the expected "
                + "dependencies recorded in " + expectedDependencies + ". "
                + "Run `./gradlew generateLock saveLock` and commit the updated version.lock files")
        }
    }
    verifyDependencyLocksAreCurrent.dependsOn(generateLock)
    build.dependsOn(verifyDependencyLocksAreCurrent)

    tasks.check.dependsOn(javadoc)

    test {
        minHeapSize = "512m"
        maxHeapSize = "512m"
    }
}
